name: Packagers Verify
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main, master ]
jobs:
  brew-verify:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build local binary
        shell: bash
        run: |
          set -euo pipefail
          python -V
          pip install -e . pyinstaller
          pyinstaller --onefile -n writetofillet src/writetofillet/cli.py
          arch_name="x64"
          if [ "$(uname -m)" = "arm64" ]; then arch_name="arm64"; fi
          mv dist/writetofillet "dist/writetofillet-macos-${arch_name}"
      - name: Brew install from local tap
        shell: bash
        run: |
          set -euo pipefail
          # Create a temporary local tap and copy the formula into it
          brew tap-new local/writetofillet >/dev/null
          tapdir="$(brew --repository)/Library/Taps/local/homebrew-writetofillet"
          mkdir -p "$tapdir/Formula"
          cp Formula/writetofillet.rb "$tapdir/Formula/writetofillet.rb"
          # Point the formula URL for this platform to the locally built artifact (use Python for robust edit)
          arch_name="x64"
          if [ "$(uname -m)" = "arm64" ]; then arch_name="arm64"; fi
          export TAPDIR="$tapdir"
          export ARCH_NAME="$arch_name"
          python - <<'PY'
import os, re
tapdir = os.environ["TAPDIR"]
arch = os.environ["ARCH_NAME"]
p = f"{tapdir}/Formula/writetofillet.rb"
with open(p, "r", encoding="utf-8") as f:
    s = f.read()
s = re.sub(r'^\s*url\s+"https://github\.com/[^"]+/releases/latest/download/writetofillet-macos-[^"]+"',
           f'  url "file://{os.getcwd()}/dist/writetofillet-macos-{arch}"', s, flags=re.M)
with open(p, "w", encoding="utf-8") as f:
    f.write(s)
print("Patched formula URL to local file")
PY
          # Install from the local tap by name, not path
          brew install local/writetofillet/writetofillet
          writetofillet --version
  scoop-verify:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Scoop
        shell: powershell
        run: |
          iwr -useb get.scoop.sh | iex
          # Ensure Scoop shims are on PATH for subsequent steps
          echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding ascii -Append
      - name: Build local Windows binary
        shell: powershell
        run: |
          python -V
          pip install -e . pyinstaller
          pyinstaller --onefile -n writetofillet src/writetofillet/cli.py
          $archSuffix = "x64"
          if ($env:PROCESSOR_ARCHITECTURE -eq "ARM64") { $archSuffix = "arm64" }
          Move-Item -Force "dist/writetofillet.exe" "dist/writetofillet-windows-$archSuffix.exe"
          # Update manifest to point to local file with correct hash
          $manifestPath = "$pwd\bucket\writetofillet.json"
          $json = Get-Content $manifestPath -Raw | ConvertFrom-Json
          $exePath = "$pwd\dist\writetofillet-windows-$archSuffix.exe"
          $hash = (Get-FileHash -Algorithm SHA256 $exePath).Hash.ToLower()
          if ($archSuffix -eq "x64") {
            $json.architecture."64bit".url = "file://$exePath"
            $json.architecture."64bit".hash = $hash
            $json.architecture."64bit".bin = "writetofillet-windows-$archSuffix.exe"
          } else {
            $json.architecture."arm64".url = "file://$exePath"
            $json.architecture."arm64".hash = $hash
            $json.architecture."arm64".bin = "writetofillet-windows-$archSuffix.exe"
          }
          $json | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 $manifestPath
      - name: Scoop install from manifest
        shell: powershell
        run: |
          scoop install $pwd\bucket\writetofillet.json
          writetofillet --version
